name: Release Github
on:
  workflow_call:
    inputs:
      env_vars:
        required: false
        type: string
        default: "{}"
permissions:
  contents: write
  pull-requests: read
jobs:
  release:
    name: "Release"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set environment variables from JSON
        env:
          ENV_VARS_JSON: "${{ inputs.env_vars }}"
        run: |
          echo "Parsing JSON environment variables..."
          echo "$ENV_VARS_JSON" | jq -r 'to_entries|map("\(.key)=\(.value|tostring)")|.[]' >> $GITHUB_ENV
      - id: get_version
        uses: digicatapult/check-version@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Generate release notes from PR body
        id: release_notes
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "body<<EOF" >> $GITHUB_OUTPUT

          echo "## Changes" >> $GITHUB_OUTPUT

          PR_NUMBER=$(gh pr list --state merged --base main --limit 1 --json number --jq '.[0].number')
          echo "Fetching body for PR #$PR_NUMBER"

          BODY=$(gh pr view "$PR_NUMBER" --json body --jq '.body')

          echo "$BODY" | awk '
            BEGIN { section = "" }

            /^## Linked tickets/         { section = "### Linked Tickets"; print "\n" section; next }
            /^## High level description/ { section = "### High Level Description"; print "\n" section; next }
            /^## Detailed description/   { section = "### Detailed Description"; print "\n" section; next }

            /^## / { section = ""; next }

            { if (section != "") print $0 }
          ' >> $GITHUB_OUTPUT

          echo "EOF" >> $GITHUB_OUTPUT
      - name: Create GitHub release version
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          name: Release ${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false
          make_latest: true
          body: ${{ steps.release_notes.outputs.body }}
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Update latest tag
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git fetch --tags
          git tag -f latest
          git push origin -f latest
      - name: Create GitHub release latest
        uses: softprops/action-gh-release@v2
        with:
          tag_name: latest
          name: Latest Release ${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false
          generate_release_notes: true
          body: ${{ steps.release_notes.outputs.body }}
          token: ${{ secrets.GITHUB_TOKEN }}
